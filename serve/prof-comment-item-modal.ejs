<%
    var generateUUID = function(){
        var d = new Date().getTime();
        var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
            var r = (d + Math.random()*16)%16 | 0;
            d = Math.floor(d/16);
            return (c=='x' ? r : (r&0x3|0x8)).toString(16);
        });
        return uuid;
    };
%>

<script type="text/html" id="item-name-title">
    <h4 class="item-name-group"></h4>
</script>
<script type="text/html" id="comment-body">
    <span style="float:right; text-align:right;" class="full-width h6 prof-coord"></span>
    <ul class="nav nav-tabs">
    	<li class="happy">
    		<a>
        		<span class="glyphicon glyphicon-heart"></span>
    		</a>
    	</li>
    	<li class="sad">
    		<a>
    		    <span class="glyphicon glyphicon-thumbs-down"></span>
    		</a>
    	</li>
    	<li class="fear">
    		<a>
    		    <span class="glyphicon glyphicon-warning-sign"></span>
    		</a>
    	</li>
    </ul>
    <textarea class="form-control" rows="3" placeholder="Comment on a floor item"></textarea>
    <div class="modal-footer">
        <button type="button" class="btn btn-primary comment-button">Comment</button>
    </div>
    
    
    
    <%
        var scriptid = generateUUID();
    %>
    
    <script id="<%= scriptid %>">
        var moodgroup = $('#'+<%- JSON.stringify(scriptid) %>).prevAll('ul:first')
        var mood = $('#'+<%- JSON.stringify(scriptid) %>).prevAll('ul:first').find('li');
        var moodcontext = littlecontexticater({}, littlecontext);
        
        moodcontext._changing(function(event){
            if (event.key !== 'state')
                return;
            mood.removeClass('active');
        });
        moodcontext._changed(function(event){
            if (event.key !== 'state')
                return;
            var state = event.value;
            
            Lazy(state).each(function(state){
                mood.filter('.'+state).addClass('active');
            });
        });
    
    //////////////////////////////////////////////////
    
    
        moodgroup.on('click','.happy',function(){
            moodcontext.var('state', ['happy']);
        });
        moodgroup.on('click','.sad',function(){
            moodcontext.var('state', ['sad']);
        });
        moodgroup.on('click','.fear',function(){
            moodcontext.var('state', ['fear']);
        });
        
        
    /////////////////////////////////////////////////////
    
        moodcontext.var('state',['happy']);
    
</script>
<div class="modal fade full-width full-height thank-you-modal" tabindex="-1" role="dialog">
    <div class="modal-dialog full-width full-height centered" role="document">
        <div class="modal-content full-width break-width vertical-center">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal"><span>&times;</span></button>
                <h4 class="modal-title">Thank you for your comments!</h4>
            </div>
        </div>
    </div>
</div>

<script>
    var tracksavecomment = function(){
        var commentbutton = $('.comment-button');
        
        commentbutton.click(function(click){
            var clickbox = $('.click-box');
            var offset = clickbox.offset();
            var pointx = (click.pageX - offset.left) / clickbox.width() * 1000;
            var pointy = (click.pageY - offset.top) / clickbox.height() * 1000;
        
            var loadcurrentfloor = function(url, data){
                console.log('sending comment', {comment: {state: moodcontext.state, message: $('textarea').val(), click: {x: pointx, y: pointy}, floorid: context.floors[context.current], itemid: context.itemid}, template: url, content: data});
                socket.emit('loadfloor'
                    , 
                    {
                        comment: {state: moodcontext.state, message: $('textarea').val(), click: {x: pointx, y: pointy}, floorid: context.floors[context.current], itemid: context.itemid},
                        template: url,
                        content: data
                    });
            };
            loadcurrentfloor('floor-items-div', {id: context.floors[context.current]});
            $('.modal').modal('hide');
            $('.thank-you-modal').modal('show');
        });
    };
    context.var('modal-body',$('#comment-body').html()+'</'+'script>')
        .then(tracksavecomment);
    
    context._changed(function(event){
        if (event.key !== 'itemid')
            return;
        var itemid = event.value;
        context.var('modal-title', $('#item-name-title').html())
            .then(function(){
        $('.item-name-group').html(itemid);
        var clickbox = $('.click-box');
        var offset = clickbox.offset();
        var click = context.click;
        var pointx = (click.pageX - offset.left) / clickbox.width() * 1000;
        var pointy = (click.pageY - offset.top) / clickbox.height() * 1000;
        $('.prof-coord').html('x: ' + pointx+',<br> y: ' + pointy);
        console.log('click was at',pointx,pointy);
        context.var('modal', $('polygon[data-itemid='+JSON.stringify(itemid)+']'))
            });
    });
    
</script>